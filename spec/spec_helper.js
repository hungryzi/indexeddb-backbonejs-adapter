// Generated by CoffeeScript 1.4.0
var databasev1, databasev2, databasev3,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

databasev1 = {
  id: "movies-database",
  description: "The database for the Movies",
  nolog: false,
  migrations: [
    {
      version: 1,
      migrate: function(transaction, next) {
        var store;
        store = transaction.db.createObjectStore("movies");
        return next();
      }
    }
  ]
};

databasev2 = $.extend(true, {}, databasev1);

databasev2.migrations.push({
  version: 2,
  migrate: function(transaction, next) {
    var store;
    store = void 0;
    if (!transaction.db.objectStoreNames.contains("movies")) {
      store = transaction.db.createObjectStore("movies");
    }
    store = transaction.objectStore("movies");
    store.createIndex("titleIndex", "title", {
      unique: false
    });
    store.createIndex("formatIndex", "format", {
      unique: false
    });
    return next();
  }
});

databasev3 = $.extend(true, {}, databasev2);

databasev3.migrations.push({
  version: 3,
  migrate: function(transaction, next) {
    var store;
    store = transaction.db.createObjectStore("torrents", {
      keyPath: "id"
    });
    return next();
  }
});

window.Moviev1 = (function(_super) {

  __extends(Moviev1, _super);

  function Moviev1() {
    return Moviev1.__super__.constructor.apply(this, arguments);
  }

  Moviev1.prototype.database = databasev1;

  Moviev1.prototype.storeName = "movies";

  return Moviev1;

})(Backbone.Model);

window.Movie = Backbone.Model.extend({
  database: databasev2,
  storeName: "movies"
});

window.Torrent = Backbone.Model.extend({
  database: databasev3,
  storeName: "torrents"
});

window.Theater = Backbone.Collection.extend({
  database: databasev2,
  storeName: "movies",
  model: Movie
});

window.PirateBay = Backbone.Collection.extend({
  database: databasev3,
  storeName: "torrents",
  model: Torrent
});

window.testDone = function() {
  return window.asyncTestDone = true;
};

window.asyncTest = function(test) {
  window.asyncTestDone = false;
  runs(test);
  return waitsFor((function() {
    return window.asyncTestDone;
  }), "test to finish", 500);
};

beforeEach(function() {
  return window.asyncTestDone = false;
});

window.deleteDB = function(dbObj) {
  var dbreq, indexedDB;
  try {
    indexedDB = IndexedDBBackbone.indexedDB;
    dbreq = indexedDB.deleteDatabase(dbObj.id);
    dbreq.onsuccess = function(event) {
      var db;
      db = event.result;
      return console.log("indexedDB: " + dbObj.id + " deleted");
    };
    return dbreq.onerror = function(event) {
      return console.error("indexedDB.delete Error: " + event.message);
    };
  } catch (e) {
    console.error("Error: " + e.message);
    dbObj.id = dbObj.id + "." + IndexedDBBackbone.guid();
    return console.log("fallback to new database name :" + dbObj.id);
  }
};

deleteDB(databasev2);

window.fail = function(msg) {
  expect(true).toEqual(false);
  return testDone();
};

window.addAllMovies = function(movies, done) {
  var m, movie;
  if (!movies) {
    movies = [
      {
        title: "Hello",
        format: "blueray",
        id: "1"
      }, {
        title: "Bonjour",
        format: "dvd",
        id: "2"
      }, {
        title: "Halo",
        format: "blueray",
        id: "3"
      }, {
        title: "Nihao",
        format: "streaming",
        id: "4"
      }, {
        title: "Ciao",
        format: "dvd",
        id: "5"
      }
    ];
  }
  movie = movies.shift();
  if (movie) {
    m = new Movie();
    return m.save(movie, {
      success: function() {
        return addAllMovies(movies, done);
      },
      error: function(o, error) {
        start();
        return equals(true, false, error.error.target.webkitErrorMessage);
      }
    });
  } else {
    return done();
  }
};

window.deleteNext = function(movies, done) {
  if (movies.length === 0) {
    return done();
  } else {
    return movies[0].destroy({
      success: function() {
        return deleteNext(movies, done);
      }
    });
  }
};
