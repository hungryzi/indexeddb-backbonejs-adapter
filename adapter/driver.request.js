// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Driver.Request = (function() {

  function Request(transaction, storeName, objectJSON, options) {
    this.objectJSON = objectJSON;
    this.options = options;
    this.store = transaction.objectStore(storeName);
  }

  Request.prototype.execute = function() {
    var request;
    request = this.run();
    return this.bindCallbacks(request);
  };

  Request.prototype.bindCallbacks = function(request) {
    var _this = this;
    request.onerror = function(e) {
      return _this.options.error(e);
    };
    return request.onsuccess = function(e) {
      return _this.options.success(_this.objectJSON);
    };
  };

  return Request;

})();

Driver.AddRequest = (function(_super) {

  __extends(AddRequest, _super);

  function AddRequest() {
    return AddRequest.__super__.constructor.apply(this, arguments);
  }

  AddRequest.prototype.run = function() {
    if (this.objectJSON.id === void 0) {
      this.objectJSON.id = guid();
    }
    if (this.objectJSON.id === null) {
      delete this.objectJSON.id;
    }
    if (this.store.keyPath) {
      return this.store.add(this.objectJSON);
    } else {
      return this.store.add(this.objectJSON, this.objectJSON.id);
    }
  };

  return AddRequest;

})(Driver.Request);

Driver.PutRequest = (function(_super) {

  __extends(PutRequest, _super);

  function PutRequest() {
    return PutRequest.__super__.constructor.apply(this, arguments);
  }

  PutRequest.prototype.run = function() {
    if (this.objectJSON.id == null) {
      this.objectJSON.id = guid();
    }
    if (this.store.keyPath) {
      return this.store.put(this.objectJSON);
    } else {
      return this.store.put(this.objectJSON, this.objectJSON.id);
    }
  };

  return PutRequest;

})(Driver.Request);

Driver.DeleteRequest = (function(_super) {

  __extends(DeleteRequest, _super);

  function DeleteRequest() {
    return DeleteRequest.__super__.constructor.apply(this, arguments);
  }

  DeleteRequest.prototype.execute = function() {
    var request,
      _this = this;
    request = this.store["delete"](this.objectJSON.id);
    request.onsuccess = function(event) {
      return _this.options.success(null);
    };
    return request.onerror = function(event) {
      return _this.options.error("Not Deleted");
    };
  };

  return DeleteRequest;

})(Driver.Request);

Driver.ClearRequest = (function(_super) {

  __extends(ClearRequest, _super);

  function ClearRequest() {
    return ClearRequest.__super__.constructor.apply(this, arguments);
  }

  ClearRequest.prototype.execute = function() {
    var request,
      _this = this;
    request = this.store.clear();
    request.onsuccess = function(e) {
      return _this.options.success(null);
    };
    return request.onerror = function(e) {
      return _this.options.error("Not Cleared");
    };
  };

  return ClearRequest;

})(Driver.Request);

Driver.GetRequest = (function(_super) {

  __extends(GetRequest, _super);

  function GetRequest() {
    return GetRequest.__super__.constructor.apply(this, arguments);
  }

  GetRequest.prototype.execute = function() {
    var getRequest,
      _this = this;
    if (this.objectJSON.id) {
      getRequest = this.store.get(this.objectJSON.id);
    } else {
      _.each(this.store.indexNames, function(key, index) {
        index = _this.store.index(key);
        if (_this.objectJSON[index.keyPath]) {
          return getRequest = index.get(_this.objectJSON[index.keyPath]);
        }
      });
    }
    if (getRequest) {
      getRequest.onsuccess = function(e) {
        if (e.target.result) {
          return _this.options.success(e.target.result);
        } else {
          return _this.options.error("Not Found");
        }
      };
      return getRequest.onerror = function() {
        return _this.options.error("Not Found");
      };
    } else {
      return this.options.error("Not Found");
    }
  };

  return GetRequest;

})(Driver.Request);

Driver.Query = (function(_super) {

  __extends(Query, _super);

  function Query() {
    return Query.__super__.constructor.apply(this, arguments);
  }

  return Query;

})(Driver.Request);
